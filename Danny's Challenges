--DANNY's CHALLENGES

--DANNY'S DINER
--What is the total amount each customer spent at the restaurant?

SELECT 
customer_id
, SUM (price)
FROM sales
JOIN menu 
ON sales.product_id = menu.product_id
GROUP BY customer_id;

--How many days has each customer visited the restaurant?

SELECT 
customer_id
, COUNT(DISTINCT order_date) as days
FROM sales
GROUP BY customer_id;

-- What was the first item from the menu purchased by each customer?
SELECT 
customer_id
, MIN(order_date) as Date
, product_name
FROM sales
JOIN menu 
ON sales.product_id = menu.product_id
GROUP BY customer_id;

--What is the most purchased item on the menu and how many times was it purchased by all customers?

SELECT  product_name
, COUNT(product_name) AS number_of_orders
FROM sales
JOIN menu 
ON sales.product_id = menu.product_id
GROUP BY product_name
ORDER BY number_of_orders DESC
LIMIT 1 ; 


--Which item was the most popular for each customer?
SELECT  
customer_id
, product_name
, Count(product_name) as no_of_orders
FROM sales
JOIN menu 
ON sales.product_id = menu.product_id
GROUP BY 
customer_id, product_name
ORDER BY customer_id ASC, no_of_orders DESC ;

--Which item was purchased first by the customer after they became a member?
SELECT * 
FROM sales 
JOIN members 
ON sales.customer_id = members.customer_id
JOIN menu 
ON sales.product_id = menu.product_id
WHERE sales.customer_id = "B" 
AND sales.order_date > members.join_date
ORDER BY order_date ASC
LIMIT 1;

--What is the total items and amount spent for each member before they became a member?

SELECT 
sales.customer_id, 
COUNT(sales.product_id) AS total_items
, SUM(price) AS total_spent
FROM sales 
JOIN members 
ON sales.customer_id = members.customer_id
JOIN menu 
ON sales.product_id = menu.product_id
WHERE sales.order_date < members.join_date
GROUP BY sales.customer_id

--If each $1 spent equates to 10 points and sushi has a 2x points multiplier - how many points would each customer have?

SELECT 
 sales.customer_id
 , SUM(CASE 
        WHEN product_name LIKE "sushi" THEN 20* menu.price
        ELSE 10 * menu.price
        END) AS total_points
FROM sales 
JOIN menu 
ON sales.product_id = menu.product_id
GROUP BY sales.customer_id

--In the first week after a customer joins the program (including their join date) they earn 2x points on all items, not just sushi - how many points do customer A and B have at the end of January?

SELECT 
sales.customer_id
, SUM(menu.price * 20) AS points
FROM sales 
JOIN members 
ON sales.customer_id = members.customer_id
JOIN menu 
ON sales.product_id = menu.product_id
WHERE members.join_date <= sales.order_date AND (members.join_date - sales.order_date) < 7
GROUP BY sales.customer_id

--PIZZA RUNNER CHALLENGE

--How many pizzas were ordered?

SELECT 
COUNT(order_id) as total_pizza_orders
FROM customer_orders;

--How many unique customer orders were made?

SELECT 
COUNT(DISTINCT order_id) as total_pizza_orders
FROM customer_orders;

--How many successful orders were delivered by each runner?

SELECT 
runner_id
, COUNT(order_id) AS successful_orders
FROM runner_orders
WHERE pickup_time NOT LIKE 'null'
GROUP BY runner_id

--How many of each type of pizza was delivered?

SELECT 
pizza_names.pizza_name
, COUNT(pizza_names.pizza_id) AS number_of_pizza_delivered
FROM runner_orders
JOIN customer_orders 
ON runner_orders.order_id = customer_orders.order_id
JOIN pizza_names 
ON customer_orders.pizza_id = pizza_names.pizza_id
WHERE pickup_time NOT LIKE 'null'
GROUP BY pizza_name;

--How many Vegetarian and Meatlovers were ordered by each customer?

SELECT 
customer_id
, pizza_names.pizza_name
, COUNT(pizza_names.pizza_id) AS number_of_pizza_delivered
FROM runner_orders
JOIN customer_orders 
ON runner_orders.order_id = customer_orders.order_id
JOIN pizza_names 
ON customer_orders.pizza_id = pizza_names.pizza_id
WHERE pickup_time NOT LIKE 'null'
GROUP BY 1,2;

--What was the maximum number of pizzas delivered in a single order?
SELECT 
 order_id
, COUNT(order_id) as total_pizza_orders
FROM customer_orders 
GROUP BY order_id
ORDER BY 2 DESC
LIMIT 1;


--For each customer, how many delivered pizzas had at least 1 change and how many had no changes?

SELECT 
customer_id
, COUNT(pizza_id) AS number_of_pizza
FROM customer_orders 
WHERE exclusions NOT LIKE 'null' AND exclusions <>''
OR extras NOT LIKE 'null' AND extras <>''
GROUP BY 1;

--How many pizzas were delivered that had both exclusions and extras?

SELECT 
customer_id
, COUNT(pizza_id) AS number_of_pizza
FROM customer_orders 
WHERE exclusions NOT LIKE 'null' AND exclusions <>''
AND extras NOT LIKE 'null' AND extras <>''
GROUP BY 1;


--What was the total volume of pizzas ordered for each hour of the day?
SELECT 
HOUR(TIME(order_time)) AS hour
,COUNT(order_id) AS number_of_pizza
FROM customer_orders 
GROUP BY 1

--What was the volume of orders for each day of the week?

SELECT 
dayofweek(order_time) AS day_of_week
, count(order_id) AS number_of_orders
FROM customer_orders
GROUP BY 1

--How many runners signed up for each 1 week period? (i.e. week starts 2021-01-01)
SELECT
WEEK(registration_date) AS week 
,COUNT(runner_id) AS number_of_runners
FROM runners
GROUP BY 1;


-- What was the average time in minutes it took for each runner to arrive at the Pizza Runner HQ to pickup the order?
SELECT
sec_to_time(
	avg(
		time_to_sec(
			timediff(pickup_time,order_time)
            )
            )
            ) as Ave_Time_Pickup
FROM customer_orders AS co
JOIN runner_orders AS ro
ON co.order_id = ro.order_id
WHERE pickup_time NOT LIKE 'null'

--What was the average distance travelled for each customer?
SELECT 
AVG(REGEXP_SUBSTR(distance,'[0-9]+')) AS average_distance
FROM runner_orders
WHERE distance NOT LIKE 'null'

--What was the difference between the longest and shortest delivery times for all orders?
SELECT 
(MAX(REGEXP_SUBSTR(duration,'[0-9]+')) - MIN(REGEXP_SUBSTR(duration,'[0-9]+'))) AS Difference
FROM runner_orders
WHERE duration NOT LIKE 'null'

--What was the average speed for each runner for each delivery and do you notice any trend for these values?
SELECT 
runner_id, 
AVG((REGEXP_SUBSTR(distance,'[0-9]+'))/ (REGEXP_SUBSTR(duration,'[0-9]+'))) as avg_speed
FROM customer_orders AS co
JOIN runner_orders AS ro
ON co.order_id = ro.order_id
WHERE distance NOT LIKE 'null'
GROUP BY 1

--FOODIE- FI CASE STUDY 
--How many customers has Foodie-Fi ever had?
SELECT 
COUNT(DISTINCT customer_id) as number_of_customers
FROM subscriptions

--What is the monthly distribution of trial plan start_date values for our dataset - use the start of the month as the group by value
SELECT 
month(start_date) as Month
, COUNT(s.plan_id) as number_of_trials
FROM subscriptions AS s
JOIN plans AS p
ON s.plan_id =p.plan_id
WHERE s.plan_id = 0
GROUP BY 1
ORDER BY 1 ASC

--What plan start_date values occur after the year 2020 for our dataset? Show the breakdown by count of events for each plan_name
SELECT 
plan_name, 
Count(start_date) AS count
FROM subscriptions AS s
JOIN plans AS p
ON s.plan_id =p.plan_id
WHERE YEAR(start_date) > 2020
GROUP BY 1
ORDER BY 2


--What is the customer count and percentage of customers who have churned rounded to 1 decimal place?
SELECT 
plan_name
, COUNT(start_date) AS count
, ROUND(COUNT(start_date) /1000,1) AS percentage
FROM subscriptions AS s
JOIN plans AS p
ON s.plan_id =p.plan_id
WHERE plan_name='churn'
GROUP BY 1
ORDER BY 2

--How many customers have churned straight after their initial free trial - what percentage is this rounded to the nearest whole number?
SELECT 
customer_id
, SUM(price) 
FROM subscriptions AS s
JOIN plans AS p
ON s.plan_id =p.plan_id
GROUP BY 1 
HAVING SUM(price)=0.00
ORDER BY 1


--What is the number and percentage of customer plans after their initial free trial?
SELECT 
customer_id
, plan_name
, s.plan_id
, MIN(start_date)
FROM subscriptions AS s
JOIN plans AS p
ON s.plan_id =p.plan_id
WHERE s.plan_id <> 0
GROUP BY 1
HAVING s.plan_id =4

--What is the customer count and percentage breakdown of all 5 plan_name values at 2020-12-31?
SELECT 
customer_id
, plan_name
, s.plan_id
, MAX(start_date)
FROM subscriptions AS s
JOIN plans AS p
ON s.plan_id =p.plan_id
WHERE s.plan_id <> 0
AND start_date <= '2020-12-31'
GROUP BY 1
HAVING s.plan_id = 4

--How many customers have upgraded to an annual plan in 2020?
SELECT 
customer_id
, plan_name
, s.plan_id
, MAX(start_date)
FROM subscriptions AS s
JOIN plans AS p
ON s.plan_id =p.plan_id
WHERE s.plan_id <> 0
AND YEAR(start_date)= '2020'
GROUP BY 1
HAVING s.plan_id = 3


--How many days on average does it take for a customer to an annual plan from the day they join Foodie-Fi?
SELECT 
customer_id
, datediff(max(start_date),min(start_date)) as number_of_days
FROM subscriptions AS s
JOIN plans AS p
ON s.plan_id =p.plan_id
WHERE s.plan_id = '0' OR s.plan_id = '3'
GROUP BY 1
HAVING (datediff(max(start_date),min(start_date))) <> '0';


--How many customers downgraded from a pro monthly to a basic monthly plan in 2020?
SELECT 
s.customer_id
, start_date
, s.plan_id
, LAG(plan_id, 1)OVER(
	PARTITION BY customer_id 
    ORDER BY start_date) 'previous'
FROM subscriptions s
INNER JOIN monthly_annual m
ON s.customer_id = m.customer_id
WHERE plan_id = '2' OR plan_id ='3'

--DATA BANK
--How many unique nodes are there on the Data Bank system?
SELECT DISTINCT
node_id
, COUNT(node_id)
FROM customer_nodes
GROUP BY 1
ORDER BY 1

--What is the number of nodes per region?
SELECT 
c.region_id
,r.region_name
, COUNT(c.node_id)
FROM customer_nodes c
JOIN regions r
ON c.region_id = r.region_id
GROUP BY 1,2
ORDER BY 1

--How many customers are allocated to each region?
SELECT 
c.region_id
,r.region_name
, COUNT(c.customer_id)
FROM customer_nodes c
JOIN regions r
ON c.region_id = r.region_id
GROUP BY 1,2
ORDER BY 1

--What is the unique count and total amount for each transaction type?
SELECT DISTINCT
txn_type,
COUNT(txn_type) AS number_txn, 
SUM(txn_amount) AS total_amount
FROM customer_transactions
GROUP BY 1


--What is the average total historical deposit counts and amounts for all customers?
SELECT DISTINCT
txn_type,
COUNT(txn_type) AS number_txn, 
SUM(txn_amount) AS total_amount, 
(SUM(txn_amount)/COUNT(txn_type)) AS avg
FROM customer_transactions
GROUP BY 1


--For each month - how many Data Bank customers make more than 1 deposit and either 1 purchase or 1 withdrawal in a single month?
SELECT 
MONTH(txn_date) AS Month
, customer_id
, txn_type 
, COUNT(txn_type) AS No_of_txn
, CASE 
	WHEN txn_type ='deposit' AND COUNT(txn_type)>1 THEN '1'
    WHEN txn_type ='purchase' AND COUNT(txn_type) = 1 THEN '1'
    WHEN txn_type ='withdrawal' AND COUNT(txn_type) = 1 THEN '1'
    ELSE 0
    END AS final_count
FROM customer_transactions
GROUP BY 1, 2, 3
ORDER BY 1,2


SELECT 
Month
, SUM(final_count) AS number_of_customers
FROM month_customer_txn 
GROUP BY 1

--What is the closing balance for each customer at the end of the month?
SELECT 
MONTH(txn_date) AS Month
, customer_id
, txn_type
, txn_amount
, CASE 
	WHEN txn_type = 'deposit' THEN ABS(txn_amount)
    ELSE txn_amount*-1
    END AS accounting
FROM customer_transactions
ORDER BY 1,2

SELECT 
customer_id
, Month
, SUM(accounting)
FROM accounting2
GROUP BY 1,2







