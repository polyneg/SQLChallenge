--DANNY's DINER CHALLENGE 
--What is the total amount each customer spent at the restaurant?

SELECT 
customer_id
, SUM (price)
FROM sales
JOIN menu 
ON sales.product_id = menu.product_id
GROUP BY customer_id;

--How many days has each customer visited the restaurant?

SELECT 
customer_id
, COUNT(DISTINCT order_date) as days
FROM sales
GROUP BY customer_id;

-- What was the first item from the menu purchased by each customer?
SELECT 
customer_id
, MIN(order_date) as Date
, product_name
FROM sales
JOIN menu 
ON sales.product_id = menu.product_id
GROUP BY customer_id;

--What is the most purchased item on the menu and how many times was it purchased by all customers?

SELECT  product_name
, COUNT(product_name) AS number_of_orders
FROM sales
JOIN menu 
ON sales.product_id = menu.product_id
GROUP BY product_name
ORDER BY number_of_orders DESC
LIMIT 1 ; 


--Which item was the most popular for each customer?
SELECT  
customer_id
, product_name
, Count(product_name) as no_of_orders
FROM sales
JOIN menu 
ON sales.product_id = menu.product_id
GROUP BY 
customer_id, product_name
ORDER BY customer_id ASC, no_of_orders DESC ;

--Which item was purchased first by the customer after they became a member?
SELECT * 
FROM sales 
JOIN members 
ON sales.customer_id = members.customer_id
JOIN menu 
ON sales.product_id = menu.product_id
WHERE sales.customer_id = "B" 
AND sales.order_date > members.join_date
ORDER BY order_date ASC
LIMIT 1;

--What is the total items and amount spent for each member before they became a member?

SELECT 
sales.customer_id, 
COUNT(sales.product_id) AS total_items
, SUM(price) AS total_spent
FROM sales 
JOIN members 
ON sales.customer_id = members.customer_id
JOIN menu 
ON sales.product_id = menu.product_id
WHERE sales.order_date < members.join_date
GROUP BY sales.customer_id

--If each $1 spent equates to 10 points and sushi has a 2x points multiplier - how many points would each customer have?

SELECT 
 sales.customer_id
 , SUM(CASE 
        WHEN product_name LIKE "sushi" THEN 20* menu.price
        ELSE 10 * menu.price
        END) AS total_points
FROM sales 
JOIN menu 
ON sales.product_id = menu.product_id
GROUP BY sales.customer_id

--In the first week after a customer joins the program (including their join date) they earn 2x points on all items, not just sushi - how many points do customer A and B have at the end of January?

SELECT 
sales.customer_id
, SUM(menu.price * 20) AS points
FROM sales 
JOIN members 
ON sales.customer_id = members.customer_id
JOIN menu 
ON sales.product_id = menu.product_id
WHERE members.join_date <= sales.order_date AND (members.join_date - sales.order_date) < 7
GROUP BY sales.customer_id

--PIZZA RUNNER CHALLENGE

--How many pizzas were ordered?

SELECT 
COUNT(order_id) as total_pizza_orders
FROM customer_orders;

--How many unique customer orders were made?

SELECT 
COUNT(DISTINCT order_id) as total_pizza_orders
FROM customer_orders;

--How many successful orders were delivered by each runner?

SELECT 
runner_id
, COUNT(order_id) AS successful_orders
FROM runner_orders
WHERE pickup_time NOT LIKE 'null'
GROUP BY runner_id

--How many of each type of pizza was delivered?

SELECT 
pizza_names.pizza_name
, COUNT(pizza_names.pizza_id) AS number_of_pizza_delivered
FROM runner_orders
JOIN customer_orders 
ON runner_orders.order_id = customer_orders.order_id
JOIN pizza_names 
ON customer_orders.pizza_id = pizza_names.pizza_id
WHERE pickup_time NOT LIKE 'null'
GROUP BY pizza_name;

--How many Vegetarian and Meatlovers were ordered by each customer?

SELECT 
customer_id
, pizza_names.pizza_name
, COUNT(pizza_names.pizza_id) AS number_of_pizza_delivered
FROM runner_orders
JOIN customer_orders 
ON runner_orders.order_id = customer_orders.order_id
JOIN pizza_names 
ON customer_orders.pizza_id = pizza_names.pizza_id
WHERE pickup_time NOT LIKE 'null'
GROUP BY 1,2;






